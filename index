<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Inteligente - HTML Simples</title>
    <!-- Tailwind CSS CDN para estilização moderna e responsiva -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Fonte Inter -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; }
        /* CSS para o efeito de digitação */
        .dot-pulse {
            animation: pulse 1s infinite;
        }
        @keyframes pulse {
            0%, 100% { opacity: 0.2; }
            50% { opacity: 1; }
        }
        .dot-pulse.delay-75 { animation-delay: 0.1s; }
        .dot-pulse.delay-150 { animation-delay: 0.2s; }
    </style>
</head>
<body class="bg-gray-50 flex flex-col h-screen antialiased">

    <!-- Header Fixo -->
    <header class="bg-white p-4 shadow-md flex justify-between items-center fixed top-0 left-0 right-0 z-10 max-w-lg mx-auto w-full rounded-b-xl">
        <h1 class="text-xl font-bold text-gray-800 flex items-center">
            <svg class="w-6 h-6 mr-2 text-indigo-500" fill="currentColor" viewBox="0 0 20 20">
                <path d="M2 5a2 2 0 012-2h12a2 2 0 012 2v10a2 2 0 01-2 2H4a2 2 0 01-2-2V5zm4 3a2 2 0 100-4 2 2 0 000 4zm8 0a2 2 0 100-4 2 2 0 000 4z" />
            </svg>
            Chat Inteligente HTML
        </h1>
    </header>

    <!-- Chat Body -->
    <main id="chat-container" class="flex-1 overflow-y-auto p-4 pt-20 pb-20 space-y-4 max-w-lg w-full mx-auto">
        <!-- Mensagens serão injetadas aqui -->
        <div id="initial-message" class="text-center text-gray-500 mt-10 p-4 bg-white rounded-lg shadow-sm">
            <p>Inicie sua conversa! A chave API do Gemini está configurada. O histórico é salvo no navegador.</p>
        </div>
        <div id="messages-end"></div>
    </main>

    <!-- Input Footer Fixo -->
    <footer class="bg-white p-3 shadow-t fixed bottom-0 left-0 right-0 z-10 max-w-lg mx-auto w-full rounded-t-xl">
        <form id="chat-form" class="flex space-x-3">
            <input
                type="text"
                id="message-input"
                placeholder="Digite sua mensagem..."
                class="flex-1 p-3 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-indigo-500 transition duration-150"
                required
            />
            <button
                type="submit"
                id="send-button"
                class="p-3 rounded-full text-white bg-indigo-600 hover:bg-indigo-700 transition duration-150 shadow-lg disabled:bg-gray-400"
            >
                <svg class="w-6 h-6 transform rotate-90" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 00.183.189l4 2A1 1 0 009 19.5h2a1 1 0 00.555-.164l4-2a1 1 0 00.183-.189l-7-14z" />
                </svg>
            </button>
        </form>
    </footer>

    <script>
        // A CHAVE DE API FOI INSERIDA AQUI. ESTE ARQUIVO É AUTOSSUFICIENTE.
        const API_KEY = "AIzaSyA536J-fUKm26IYCwNqCggEJ9JCwj-glNc";
        const GEMINI_MODEL_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-09-2025:generateContent";
        
        const chatContainer = document.getElementById('chat-container');
        const form = document.getElementById('chat-form');
        const input = document.getElementById('message-input');
        const messagesEnd = document.getElementById('messages-end');
        const sendButton = document.getElementById('send-button');
        const initialMessage = document.getElementById('initial-message');

        let isLoading = false;

        // 1. Funções de Utilidade
        
        function getMessages() {
            const saved = localStorage.getItem('gemini_html_chat_history');
            return saved ? JSON.parse(saved) : [];
        }

        function saveMessages(messages) {
            localStorage.setItem('gemini_html_chat_history', JSON.stringify(messages));
        }

        function scrollToBottom() {
            messagesEnd.scrollIntoView({ behavior: "smooth" });
        }

        // 2. Renderização e UI
        
        function createChatBubble(message, isUser) {
            const bubbleDiv = document.createElement('div');
            bubbleDiv.className = `flex ${isUser ? 'justify-end' : 'justify-start'} mb-4`;
            
            const contentDiv = document.createElement('div');
            contentDiv.className = `max-w-[85%] p-3 rounded-xl shadow-md whitespace-pre-wrap ${
                isUser 
                ? 'bg-indigo-500 text-white rounded-br-none' 
                : 'bg-gray-200 text-gray-800 rounded-tl-none'
            }`;
            
            // Adiciona quebras de linha (<br>)
            const textWithBreaks = message.replace(/\n/g, '<br>');
            contentDiv.innerHTML = textWithBreaks;
            
            bubbleDiv.appendChild(contentDiv);
            chatContainer.insertBefore(bubbleDiv, messagesEnd);
        }

        function renderHistory() {
            const messages = getMessages();
            if (messages.length > 0) {
                initialMessage.classList.add('hidden');
                messages.forEach(msg => {
                    createChatBubble(msg.text, msg.role === 'user');
                });
                scrollToBottom();
            }
        }

        function setLoading(state) {
            isLoading = state;
            input.disabled = state;
            sendButton.disabled = state;

            const existingLoader = document.getElementById('loader-bubble');
            if (state && !existingLoader) {
                // Cria bolha de "Digitando..."
                const loaderDiv = document.createElement('div');
                loaderDiv.id = 'loader-bubble';
                loaderDiv.className = 'flex justify-start mb-4';
                loaderDiv.innerHTML = `
                    <div class="max-w-xs p-3 rounded-xl shadow-md bg-gray-200 text-gray-800 rounded-tl-none">
                        <div class="flex items-center space-x-1">
                            <span class="dot-pulse w-2 h-2 rounded-full bg-indigo-500 animate-pulse"></span>
                            <span class="dot-pulse w-2 h-2 rounded-full bg-indigo-500 animate-pulse delay-75"></span>
                            <span class="dot-pulse w-2 h-2 rounded-full bg-indigo-500 animate-pulse delay-150"></span>
                            <span class="text-sm ml-2">Digitando...</span>
                        </div>
                    </div>
                `;
                chatContainer.insertBefore(loaderDiv, messagesEnd);
            } else if (!state && existingLoader) {
                // Remove bolha de "Digitando..."
                existingLoader.remove();
            }
            scrollToBottom();
        }

        // 3. Lógica de Comunicação com a IA

        async function generateResponse(messages) {
            const chatHistory = messages
                .map(m => ({
                    role: m.role,
                    parts: [{ text: m.text }]
                }));
            
            const systemPrompt = `Você é o "Chat Inteligente" do Gemini, um assistente amigável, rápido e conversacional. Responda em português. Use emojis.`;

            const payload = {
                contents: chatHistory,
                systemInstruction: { parts: [{ text: systemPrompt }] }
            };

            const url = `${GEMINI_MODEL_URL}?key=${API_KEY}`;
            let response;
            let currentDelay = 1000;
            const maxRetries = 3;

            try {
                for (let i = 0; i < maxRetries; i++) {
                    response = await fetch(url, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    if (response.ok) {
                        break;
                    }

                    if (i < maxRetries - 1) {
                        await new Promise(resolve => setTimeout(resolve, currentDelay));
                        currentDelay *= 2;
                    } else {
                        throw new Error(`Erro na API: ${response.status} - ${await response.text()}`);
                    }
                }

                if (!response || !response.ok) {
                    throw new Error("Falha na chamada da API após todas as retentativas.");
                }

                const result = await response.json();
                return result.candidates?.[0]?.content?.parts?.[0]?.text || "Desculpe, não consegui gerar uma resposta (resposta vazia).";

            } catch (error) {
                console.error("Erro na chamada da API do Gemini:", error);
                return "Não foi possível conectar ao Gemini. Verifique sua chave API ou limites de uso.";
            }
        }

        // 4. Tratamento do Evento de Envio
        
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const messageText = input.value.trim();
            if (!messageText || isLoading) return;
            
            initialMessage.classList.add('hidden');
            setLoading(true);
            input.value = '';

            let messages = getMessages();
            
            // 4a. Mensagem do Usuário
            const userMessage = { role: 'user', text: messageText };
            messages.push(userMessage);
            saveMessages(messages);
            createChatBubble(userMessage.text, true);

            // 4b. Chamada à IA
            const geminiResponseText = await generateResponse(messages);

            // 4c. Mensagem do Gemini
            const geminiMessage = { role: 'gemini', text: geminiResponseText };
            messages.push(geminiMessage);
            saveMessages(messages);
            
            setLoading(false); // Remove o loader antes de adicionar a resposta
            createChatBubble(geminiMessage.text, false);
            scrollToBottom();
        });

        // 5. Inicialização
        document.addEventListener('DOMContentLoaded', renderHistory);

    </script>
</body>
</html>
